# Generated by Django 5.1.2 on 2024-11-28 07:16

import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SHEObservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=100)),
                ('date', models.DateField()),
                ('time', models.TimeField()),
                ('groupMembers_tags', models.JSONField(default=list)),
                ('nature_of_issue', models.TextField()),
                ('issue_type', models.CharField(choices=[('unsafe_condition', 'Unsafe Condition'), ('unsafe_acts', 'Unsafe Acts'), ('environmental_hazard', 'Environmental Hazard'), ('health_concern', 'Health Concern'), ('near_miss', 'Near Miss'), ('bbs', 'Behavioral Based Safety (BBS)')], max_length=20)),
                ('corrective_action', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('closed', 'Resolved')], default='pending', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('area', models.CharField(choices=[('cimbria_plant', 'Cimbria Plant'), ('buhler_plant', 'Buhler Plant'), ('raw_material_warehouse', 'Raw Material Warehouse'), ('finished_goods_warehouse', 'Finished Goods Warehouse'), ('by_product_warehouse', 'By-Product Warehouse'), ('packaging_and_maintenance_warehouse', 'Packaging and Maintenance Warehouse'), ('external_warehouse', 'External Warehouse'), ('mbp', 'MPB'), ('old_admin', 'Old Admin'), ('grain_unloading_area', 'Grain Unloading Area'), ('gate', 'Gate'), ('parking_lot', 'Parking Lot'), ('waste_collection_area', 'Waste Collection Area'), ('utilities', 'Utilities'), ('forklift_and_pallet_truck_garage', 'Forklift and Pallet Truck Garage'), ('plant_periphery', 'Plant Periphery'), ('other', 'Other')], default='other', max_length=100)),
                ('area_custom', models.CharField(blank=True, default='', max_length=100)),
                ('tags', models.CharField(choices=[('electrical', 'Electrical'), ('mechanical', 'Mechanical'), ('maintenance', 'Maintenance'), ('packaging', 'Packaging'), ('logistics_and_supply', 'Logistics and Supply'), ('chain', 'Chain'), ('warehouse', 'Warehouse'), ('utilities', 'Utilities (Water, Electricity, HVAC, Steam)'), ('it_automation', 'IT/Automation'), ('civil_structural', 'CIVIL/Structural'), ('pest', 'Pest'), ('control', 'Control'), ('sanitation_and_hygiene', 'Sanitation and Hygiene'), ('calibration', 'Calibration'), ('energy', 'Energy'), ('management', 'Management'), ('process', 'Process'), ('improvement', 'Improvement'), ('training_and_development', 'Training and Development'), ('other', 'Other')], default='other', max_length=100)),
                ('tags_custom', models.CharField(blank=True, default='', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('location_details', models.TextField(blank=True)),
            ],
            options={
                'permissions': [('can_view_all_observations', 'Can view all observations'), ('can_edit_observations', 'Can edit observations'), ('can_delete_observations', 'Can delete observations'), ('can_change_status', 'Can change observation status')],
            },
        ),
        migrations.CreateModel(
            name='ObservationAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True)),
                ('department', models.CharField(max_length=100)),
                ('total_observations', models.IntegerField(default=0)),
                ('open_observations', models.IntegerField(default=0)),
                ('closed_observations', models.IntegerField(default=0)),
                ('average_resolution_time', models.DurationField(null=True)),
                ('recurring_issues', models.TextField(blank=True)),
                ('issue_type_distribution', models.JSONField(default=dict)),
                ('priority_distribution', models.JSONField(default=dict)),
                ('status_distribution', models.JSONField(default=dict)),
                ('area_distribution', models.JSONField(default=dict)),
                ('daily_counts', models.JSONField(default=dict)),
                ('weekly_counts', models.JSONField(default=dict)),
                ('monthly_counts', models.JSONField(default=dict)),
                ('resolution_time_by_priority', models.JSONField(default=dict)),
                ('monthly_resolution_times', models.JSONField(default=dict)),
                ('department_comparison', models.JSONField(default=dict)),
                ('issue_type_by_department', models.JSONField(default=dict)),
            ],
            options={
                'verbose_name_plural': 'Observation Analytics',
                'unique_together': {('date', 'department')},
            },
        ),
        migrations.CreateModel(
            name='ObservationAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='observations/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='observation_attachments', to='SHE.sheobservation')),
            ],
            options={
                'verbose_name': 'Observation Attachment',
                'verbose_name_plural': 'Observation Attachments',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email Address')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Department')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Position')),
                ('email_notifications', models.BooleanField(default=True)),
                ('reminder_frequency', models.IntegerField(blank=True, default=1, help_text='Reminder frequency in days', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('role', models.CharField(choices=[('user', 'User'), ('manager', 'Manager'), ('administrator', 'Administrator')], default='user', max_length=20, verbose_name='Role')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='sheobservation',
            name='reporter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reported_observations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ObservationActionTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('action', models.TextField()),
                ('deadline', models.DateField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('overdue', 'Overdue')], default='pending', max_length=20)),
                ('completion_notes', models.TextField(blank=True)),
                ('completion_date', models.DateField(blank=True, null=True)),
                ('time_to_completion', models.DurationField(blank=True, null=True)),
                ('priority_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10, verbose_name='Priority Level')),
                ('she_observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_entries', to='SHE.sheobservation')),
                ('assign_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tracking_entries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Observation Action Tracking',
                'verbose_name_plural': 'Observation Action Trackings',
                'ordering': ['-date'],
                'permissions': [('can_mark_complete', 'Can mark actions as complete'), ('can_reassign', 'Can reassign actions'), ('can_modify_deadline', 'Can modify deadline')],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notifications', models.BooleanField(default=True)),
                ('push_notifications', models.BooleanField(default=True)),
                ('reminder_frequency', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('notify_on_assignment', models.BooleanField(default=True)),
                ('notify_on_status_change', models.BooleanField(default=True)),
                ('notify_before_deadline', models.BooleanField(default=True)),
                ('deadline_reminder_days', models.IntegerField(default=2)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('assignment', 'New Assignment'), ('status_change', 'Status Change'), ('deadline_approaching', 'Deadline Approaching'), ('overdue', 'Overdue Task'), ('comment', 'New Comment'), ('mentioned', 'Mentioned in Comment')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('read', models.BooleanField(default=False)),
                ('emailed', models.BooleanField(default=False)),
                ('related_observation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='SHE.sheobservation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AuditTrail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(max_length=255)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('user_agent', models.CharField(max_length=255, null=True)),
                ('changes', models.JSONField(default=dict)),
                ('observation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='SHE.sheobservation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'permissions': [('can_view_audit_trail', 'Can view audit trail')],
            },
        ),
        migrations.AddIndex(
            model_name='sheobservation',
            index=django.contrib.postgres.indexes.GinIndex(fields=['search_vector'], name='SHE_sheobse_search__2b84dc_gin'),
        ),
    ]
